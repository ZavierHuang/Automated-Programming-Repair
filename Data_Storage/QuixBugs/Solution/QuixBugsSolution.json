{
  "BITCOUNT": "n = (n & (n - 1));",
  "BREADTH_FIRST_SEARCH": "while (!queue.isEmpty()) { , return false;",
  "BUCKETSORT": "for (Integer count : counts) {",
  "DEPTH_FIRST_SEARCH": "nodesvisited.add(node);",
  "DETECT_CYCLE": "if (null==hare ||hare.getSuccessor() == null)",
  "FIND_FIRST_IN_SORTED": "while (lo < hi) {",
  "FIND_IN_SORTED": "return binsearch(arr, x, mid+1, end);",
  "FLATTEN": "result.addAll((ArrayList) flatten(x)); , return arr;",
  "GCD": "return gcd(b, a%b);",
  "GET_FACTORS": "return new ArrayList<Integer>(Arrays.asList(n));",
  "HANOI": "steps.add(new Pair<Integer,Integer>(start, end));",
  "IS_VALID_PARENTHESIZATION": "return depth==0;",
  "KHEAPSORT": "for (Integer x : arr.subList(k, arr.size())) {",
  "KNAPSACK": "else if (weight <= j) {",
  "KTH": "return kth(above, k-num_lessoreq);",
  "LCS_LENGTH": "if (dp.containsKey(i-1)&&dp.get(i-1).containsKey(j-1)) { , int insert_value = dp.get(i-1).get(j-1) + 1;",
  "LEVENSHTEIN": "return levenshtein(source.substring(1), target.substring(1));",
  "LIS": "longest = Math.max(longest,length + 1);",
  "LONGEST_COMMON_SUBSEQUENCE": "return a.charAt(0) + longest_common_subsequence(a.substring(1), b.substring(1));",
  "MAX_SUBLIST_SUM": "max_ending_here = Math.max(0,max_ending_here + x);",
  "MERGESORT": "if (arr.size() <= 1) { ",
  "MINIMUM_SPANNING_TREE": "groupByNode.put(node,  groupByNode.get(vertex_u));",
  "NEXT_PALINDROME": "otherwise.addAll(Collections.nCopies(digit_list.length-1, 0));",
  "NEXT_PERMUTATION": "if (perm.get(j) > perm.get(i)) {",
  "PASCAL": "for (int c=0; c<r+1; c++) {",
  "POSSIBLE_CHANGE": "if (total < 0 ||coins.length==0) {",
  "POWERSET": "for (ArrayList subset : rest_subsets) {\n            ArrayList r = new ArrayList();\n            r.add(first);\n            r.addAll(subset);\n            to_add.add(r);\n        }\n        output.addAll(to_add);\n        rest_subsets.addAll(output);\n        return rest_subsets;",
  "QUICKSORT": "} else if (x >= pivot) {",
  "REVERSE_LINKED_LIST": "prevnode = node;",
  "RPN_EVAL": " c = bin_op.apply(b,a);",
  "SHORTEST_PATH_LENGTH": "unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n                    distance + length_by_edge.get(Arrays.asList(node, nextnode))));",
  "SHORTEST_PATH_LENGTHS": "int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                sumLengths(length_by_path.get(Arrays.asList(i,k)),\n                                                        length_by_path.get(Arrays.asList(k,j))));",
  "SHORTEST_PATHS": "weight_by_node.put(edge.get(1), update_weight);",
  "SHUNTING_YARD": "opstack.push(token);",
  "SIEVE": "if (all(list_comp(n, primes))) {",
  "SQRT": "while (Math.abs(x-approx*approx) > epsilon) {",
  "SUBSEQUENCES": "ArrayList empty_set = new ArrayList<ArrayList>();\n        empty_set.add(new ArrayList());\n        return empty_set;",
  "TO_BASE": "result = String.valueOf(alphabet.charAt(i))+result;",
  "TOPOLOGICAL_ORDERING": "if (orderedNodes.containsAll(nextNode.getPredecessors()) && !orderedNodes.contains(nextNode)) {",
  "WRAP": "lines.add(text);"
}
