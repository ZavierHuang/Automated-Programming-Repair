{"bug_id": "BREADTH_FIRST_SEARCH_0", "buggy_code": "public static Set<Node> nodesvisited = new HashSet<>();\n\npublic static boolean breadth_first_search(Node startnode, Node goalnode) {\n    Deque<Node> queue = new ArrayDeque<>();\n    queue.addLast(startnode);\n\n    nodesvisited.add(startnode);\n    \n    // while (true) {\n    while (!queue.isEmpty()) {\n        Node node = queue.removeFirst();\n\n        if (node == goalnode) {\n            return true;\n        } else {\n            for (Node successor_node : node.getSuccessors()) {\n                if (!nodesvisited.contains(successor_node)) {\n                    queue.addFirst(successor_node);\n                    nodesvisited.add(successor_node);\n                }\n            }\n        }\n    }\n    // buggy code\n    <FILL_ME>\n}\n\n", "fixed_chunk": ""}
{"bug_id": "FLATTEN_0", "buggy_code": "public static Object flatten(Object arr) {\n    if (arr instanceof ArrayList) {\n        ArrayList narr = (ArrayList) arr;\n        ArrayList result = new ArrayList(50);\n        for (Object x : narr) {\n            if (x instanceof ArrayList) {\n                result.addAll((ArrayList) flatten(x));\n            } else {\n                \n                // result.add(flatten(x));\n                result.add(flatten(x));\n            }\n        }\n        return result;\n    } else {\n        // buggy code\n        // return flatten(arr);\n        <FILL_ME>\n    }\n}\n", "fixed_chunk": ""}
{"bug_id": "LCS_LENGTH_4", "buggy_code": "public static Integer lcs_length(String s, String t) {\n    Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n    \n    for (int i=0; i < s.length(); i++) {\n        Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n        dp.put(i, initialize);\n        for (int j=0; j < t.length(); j++) {\n            Map<Integer,Integer> internal_map = dp.get(i);\n            internal_map.put(j,0);\n            dp.put(i, internal_map);\n        }\n    }\n    \n    for (int i=0; i < s.length(); i++) {\n        for (int j=0; j < t.length(); j++) {\n            if (s.charAt(i) == t.charAt(j)) {\n\n                \n                // if (dp.containsKey(i-1)) {\n                \n                    Map<Integer, Integer> internal_map = dp.get(i);\n                    // buggy code\n                    // int insert_value = dp.get(i-1).get(j) + 1;\n                    <FILL_ME>\n                    internal_map.put(j, insert_value);\n                    dp.put(i,internal_map);\n                } else {\n                    Map<Integer, Integer> internal_map = dp.get(i);\n                    internal_map.put(j,1);\n                    dp.put(i,internal_map);\n                }\n            }\n        }\n    }\n\n    if (!dp.isEmpty()) {\n        List<Integer> ret_list = new ArrayList<Integer>();\n        for (int i=0; i<s.length(); i++) {\n            ret_list.add(!dp.get(i).isEmpty() ? Collections.max(dp.get(i).values()) : 0);\n        }\n        return Collections.max(ret_list);\n    } else {\n        return 0;\n    }\n}\n", "fixed_chunk": ""}
